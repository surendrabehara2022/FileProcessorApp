trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'myconsoleapp'
  acrName: 'mytestacr001'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Step 1: List contents of MyConsoleApp to verify the Dockerfile exists
- script: |
    ls -R
    ls /home/vsts/work/1/s/FileProcessorApp/FileProcessorApp/Dockerfile
  displayName: 'List MyConsoleApp Contents'

- script: |
    if ! command -v docker &> /dev/null
    then
        echo "Docker could not be found"
        exit 1
    else
        echo "Docker is installed"
        docker version
    fi
  displayName: 'Check Docker Installation and Version'

# Step 2: Build Docker Image (with corrected context)
- script: |
    docker build -t $(imageName):$(Build.BuildId) -f '$(Build.SourcesDirectory)/FileProcessorApp/FileProcessorApp/Dockerfile' $(Build.SourcesDirectory)/FileProcessorApp
  displayName: 'Build Docker Image'

# Step 3: Tag Docker Image (optional but useful for pushing)
- script: |
    docker tag $(imageName):$(Build.BuildId) mytestacr001.azurecr.io/$(imageName):latest
    docker tag $(imageName):$(Build.BuildId) mytestacr001.azurecr.io/$(imageName):$(Build.BuildId)
  displayName: 'Tag Docker Image'

# Step 1: Azure CLI login using Managed Identity
#- task: AzureCLI@2
#  inputs:
#    azureSubscription: 'acrserviceconnection'  # Your Azure DevOps service connection to the subscription
#    scriptType: 'bash'  # Use bash to run commands
#    scriptLocation: 'inlineScript'  # Inline script execution
#    inlineScript: |
#      # Login to Azure Container Registry using Managed Identity
#      az acr login --name $(acrName)
#  displayName: 'Login to ACR using Managed Identity'

#- task: Docker@2 -- Required selfhosted agent
#  inputs:
#    containerRegistry: 'acrconnection'
#    azureSubscription: 'acrserviceconnection'
#    azureResourceManagerConnection: 'acrserviceconnection'
#    azureContainerRegistry: 'acrsqmbqafc.azurecr.io'
#    authenticationType: 'ManagedIdentity'
#    managedIdentity: 'd4df28ea-176b-4a7b-8b65-90ba28838641'    
#    repository: '$(imageName)'
#    command: 'push'
#    tags: |
#      $(Build.BuildId)

- task: AzureCLI@2
  inputs:
    azureSubscription: 'acrserviceconnectiontf'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az acr login --name mytestacr001
      docker push mytestacr001.azurecr.io/$(imageName):latest
      docker push mytestacr001.azurecr.io/$(imageName):$(Build.BuildId)
  displayName: 'Push Docker Image to ACR'

# Step 3: Initialize Terraform
- script: |
    cd '$(Build.SourcesDirectory)/containerapp_job
    terraform init -backend-config="resource_group_name=tfstatesa" -backend-config="storage_account_name=tf0001sa" -backend-config="key=terraform.deployment.tfplan"
  displayName: 'Terraform Init'

# Step 4: Plan Terraform Changes
- script: |
    cd '$(Build.SourcesDirectory)/containerapp_job
    terraform plan -out "terraform.deployment.tfplan"
  displayName: 'Terraform Plan'

# Step 5: Apply Terraform Changes (Conditional on plan)
- script: |
    cd '$(Build.SourcesDirectory)/containerapp_job
    terraform apply -auto-approve terraform.deployment.tfplan
  displayName: 'Terraform Apply'

# Step 5: Deploy to Azure Container App Job using Azure CLI
- task: AzureCLI@2
  inputs:
    azureSubscription: 'acrserviceconnectiontf'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az acr login --name mytestacr001
      az containerapp job update \
        --name manualmyconsoleappjob \
        --resource-group containerjobrg \
        --image mytestacr001.azurecr.io/$(imageName):latest \
        --debug                            
  displayName: 'Deploy to Azure Container App Job'
